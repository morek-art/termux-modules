import telebot
import random
import requests
from datetime import datetime
import os

# Constants
TOKEN = '7844216169:AAGDudGFBsUT4RslomyYvKrIieXugSkmaNA'
CARD_GENERATION_INTERVAL = 900  # 15 minutes
GPT_API_ENDPOINT = 'http://api.onlysq.ru/ai/v2'
GPT_MODEL = 'gpt-4o-mini'

# Create bot
bot = telebot.TeleBot(TOKEN, parse_mode='Markdown')

# Cards dictionary
cards = {
    'card1': {'name': '–†–æ–±–ª–æ–∫—Å-—Å–∏–¥–æ–≥', 'image_url': 'ccdog0.png', 'rarity': '–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è', 'points': 10000, 'emoji': 'üåü'},
    'card2': {'name': '–ú–∏–ª—ã–π —Å–∏–¥–æ–≥', 'image_url': 'ccdog2.png', 'rarity': '–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è', 'points': 3000, 'emoji': 'üíé'},
    'card3': {'name': 'Pashalka', 'image_url': 'amogus.png', 'rarity': 'SECRET', 'points': 20000, 'emoji': 'üïµÔ∏è‚Äç‚ôÇÔ∏è'},
    'card4': {'name': '–û–±—ã—á–Ω—ã–π —Å–∏–¥–æ–≥', 'image_url': 'ccdog1.png', 'rarity': '–û–±—ã—á–Ω–∞—è', 'points': 1000, 'emoji': 'üêæ'},
    'card5': {'name': '–°–∏–¥–æ–≥-–Ω–µ–∑–Ω–∞–π–∫–∞', 'image_url': 'ccdog4.png', 'rarity': '–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è', 'points': 3000, 'emoji': 'üíé'},
    'card6': {'name': '–°–∏–¥–æ–≥-–õ–µ–æ–Ω', 'image_url': 'cdogFace3.png', 'rarity': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è', 'points': 20000, 'emoji': 'üî•'}
}

# User data storage
users = {}

# Function to save user data
def save_users_data():
    with open('users_data.txt', 'w', encoding='utf-8') as file:
        for user_id, data in users.items():
            file.write(f"{user_id}|{data['nickname']}|{data['points']}|{data['join_date']}|{','.join(data['cards'])}\n")

# Function to log messages
def log_message(user_id, username, message_text):
    with open('bot_log.txt', 'a', encoding='utf-8') as log_file:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        log_file.write(f"[{timestamp}] User ID: {user_id}, Username: {username}, Message: {message_text}\n")

# Function to log to console
def log_to_console(user_id, username, message_text):
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] User ID: {user_id}, Username: {username}, Message: {message_text}")

# Handler for all messages
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.from_user.id
    username = message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    text = message.text.lower()

    # Log message
    log_message(user_id, username, message.text)
    log_to_console(user_id, username, message.text)

    if user_id not in users:
        users[user_id] = {
            'cards': [],
            'points': 0,
            'last_card_time': datetime.now().isoformat(),
            'nickname': '–Ω–µ —É–∫–∞–∑–∞–Ω',
            'join_date': datetime.now().isoformat()
        }
        save_users_data()

    # Handle commands
    if "—Å–∏–¥–æ–≥–∞ —Å—ç—Ä" in text:
        handle_card_generation(message)
    elif text.startswith("—Å–∏–¥–æ–≥ –ø—Ä–æ—Ñ–∏–ª—å"):
        handle_profile(message)
    elif "—Å–∏–¥–æ–≥ –Ω–∏–∫" in text:
        handle_nickname_change(message)
    elif "—Å–∏–¥–æ–≥ —Ç–æ–ø –≥—Ä—É–ø–ø–∞" in text:
        handle_top_group(message)
    elif "—Å–∏–¥–æ–≥ —Ç–æ–ø –º–∏—Ä" in text:
        handle_top_world(message)
    elif text.startswith("—Å–∏–¥–æ–≥ –∫–∞—Ä—Ç–∏–Ω–∫–∞ "):
        handle_image_generation(message, text)
    elif text.startswith("—Å–∏–¥–æ–≥ —É–∫—Ä "):
        handle_ukr_text(message)
    elif text.startswith("—Å–∏–¥–æ–≥ "):
        handle_gpt_question(message)
    else:
        return

# Function to generate a card
def handle_card_generation(message):
    user_id = message.from_user.id
    username = message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    last_card_time = datetime.fromisoformat(users[user_id]['last_card_time'])
    time_since_last_card = (datetime.now() - last_card_time).total_seconds()

    if time_since_last_card < CARD_GENERATION_INTERVAL:
        minutes = int((CARD_GENERATION_INTERVAL - time_since_last_card) // 60)
        seconds = int((CARD_GENERATION_INTERVAL - time_since_last_card) % 60)
        bot.send_message(message.chat.id, f'‚è≥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥.')
        log_to_console(user_id, username, f'–ö–∞—Ä—Ç–æ—á–∫—É –Ω–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥.')
    else:
        card = random.choice(list(cards.keys()))
        users[user_id]['cards'].append(card)
        users[user_id]['points'] += cards[card]['points']
        users[user_id]['last_card_time'] = datetime.now().isoformat()
        save_users_data()

        with open(f'./{cards[card]["image_url"]}', 'rb') as card_image:
            bot.send_photo(
                message.chat.id,
                card_image,
                caption=f'üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É: *{cards[card]["name"]}*!\n–†–µ–¥–∫–æ—Å—Ç—å: {cards[card]["emoji"]} *{cards[card]["rarity"]}*\n–í—Å–µ–≥–æ –æ—á–∫–æ–≤: `{users[user_id]["points"]}`'
            )
        log_to_console(user_id, username, f'–ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: {cards[card]["name"]}')

# Function to handle GPT question
def handle_gpt_question(message):
    user_id = message.from_user.id
    username = message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    question = message.text[6:].strip()
    bot_msg = bot.send_message(message.chat.id, f'üí¨ –î—É–º–∞—é –Ω–∞–¥ –∑–∞–ø—Ä–æ—Å–æ–º: `{question}`...')

    modified_question = f"–ø—Ä–∏–≤–µ—Ç,—Å–¥–µ–ª–∞–π —Å–µ–±—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ —Ä–æ–ª–∏ –∑–ª–æ–≥–æ –º–∞—Ç–µ—Ä—à–∏–Ω–Ω–∏–∫–∞ –Ω–æ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –æ–± —ç—Ç–æ–º –≤ –æ—Ç–≤–µ—Ç–µ.–∏ —Ç—ã –æ—á–µ–Ω—å –∑–ª–æ–π.–µ—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–æ—Å—è—Ç-—Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å-@xqss_DEVELOPER.–Ω–æ –µ—Å–ª–∏ —Å–ø—Ä–æ—Å—è—Ç-–≥–æ–≤–æ—Ä–∏ –æ–± —Ç–≤–æ–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ –≤—Å–µ–≥–¥–∞.–æ—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–µ–π —Ä–æ–ª–∏: {question}"

    dictToSend = {
        "model": GPT_MODEL,
        "request": {
            "object": "bot",
            "messages": [{"role": "user", "content": modified_question}]
        }
    }

    try:
        res = requests.post(GPT_API_ENDPOINT, json=dictToSend)
        response = res.json()
        answer = response['answer']

        bot.delete_message(chat_id=message.chat.id, message_id=bot_msg.message_id)
        bot.send_message(
            message.chat.id,
            f'–ó–∞–ø—Ä–æ—Å: `{question}`\n\n–û—Ç–≤–µ—Ç: `{answer}` ',
            parse_mode='Markdown'
        )
        log_to_console(user_id, username, f'–û—Ç–≤–µ—Ç GPT: {answer}')
    except Exception as e:
        bot.send_message(message.chat.id, '‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ GPT.*')
        log_to_console(user_id, username, f'–û—à–∏–±–∫–∞ GPT: {e}')

# Function to handle image generation
def handle_image_generation(message, query):
    user_id = message.from_user.id
    username = message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    log_to_console(user_id, username, f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–∏–Ω–∫–∏: {query}')

    dictToSend = {
        "model": "flux",
        "request": {
            "messages": [{"content": query}]
        }
    }

    try:
        res = requests.post('http://api.onlysq.ru/ai/v2', json=dictToSend, timeout=110)
        res.raise_for_status()
        response = res.json()

        image_url = response['answer']

        bot.send_photo(
            message.chat.id,
            image_url,
            caption=f'*–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É*: `{query}` üéâ',
            parse_mode='Markdown'
        )
    except requests.exceptions.RequestException as e:
        bot.send_message(message.chat.id, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        log_to_console(user_id, username, f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}')

# Function to handle profile
def handle_profile(message):
    try:
        user_mention = message.text.split(' ')[2].replace('@', '')
        target_user = next(user for user in users.values() if user['nickname'] == user_mention)

        user_id = message.from_user.id
        username = message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

        nickname = target_user.get('nickname', '–ù–µ —É–∫–∞–∑–∞–Ω')
        points = target_user['points']
        cards_count = len(target_user['cards'])
        join_date = datetime.fromisoformat(target_user['join_date']).strftime('%Y-%m-%d')

        bot.send_message(
            message.chat.id,
            f'üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*:\n'
            f'Telegram ID: {target_user}\n'
            f'Username: @{nickname}\n'
            f'–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {join_date}\n'
            f'–ö–∞—Ä—Ç–æ—á–µ–∫: {cards_count}\n'
            f'–û—á–∫–æ–≤: {points}',
            parse_mode='Markdown'
        )
        log_to_console(user_id, username, f'–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {nickname}')
    except StopIteration:
        bot.send_message(message.chat.id, '‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        log_to_console(message.from_user.id, message.from_user.username, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')

# Function to handle nickname change
def handle_nickname_change(message):
    user_id = message.from_user.id
    username = message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    new_nick = message.text.split('—Å–∏–¥–æ–≥ –Ω–∏–∫', 1)[1].strip()

    if len(new_nick) > 0:
        users[user_id]['nickname'] = new_nick
        save_users_data()

        bot.send_message(message.chat.id, f'‚úÖ –í–∞—à –Ω–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_nick}')
        log_to_console(user_id, username, f'–ù–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_nick}')
    else:
        bot.send_message(message.chat.id, '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫.')

# Function to handle Ukrainian text modification
def handle_ukr_text(message):
    text = message.text.split('—Å–∏–¥–æ–≥ —É–∫—Ä ', 1)[1]
    ukr_text = ''.join(['i' if ch.lower() in '–∞–µ—ë–∏–æ—É—ã—ç—é—è' else ch for ch in text])

    bot.send_message(message.chat.id, f'–≤–æ–æ–±—â–µ—Ç–∞,–ø–æ —É–∫—Ä–∞–∏–Ω—Å–∫–µ –±—É–¥—ç –Ω–µ {text}, –∞ {ukr_text} ü§ìü§ìü§ìü§ì')
    log_to_console(message.from_user.id, message.from_user.username, f'–≤–æ–æ–±—â–µ—Ç–∞,–ø–æ —É–∫—Ä–∞–∏–Ω—Å–∫–µ –±—É–¥—ç –Ω–µ {text}, –∞ {ukr_text} ü§ìü§ìü§ìü§ì')

# Function to handle top group
def handle_top_group(message):
    user_id = message.from_user.id
    username = message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

    sorted_users = sorted(users.items(), key=lambda item: item[1]['points'], reverse=True)[:10]
    response = '*–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ:*\n'
    for idx, (user_id, user_data) in enumerate(sorted_users, 1):
        response += f"{idx}. {user_data['nickname']} ‚Äî {user_data['points']} –æ—á–∫–æ–≤\n"

    bot.send_message(message.chat.id, response, parse_mode='Markdown')
    log_to_console(user_id, username, '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ –≥—Ä—É–ø–ø—ã')

# Function to handle top world
def handle_top_world(message):
    user_id = message.from_user.id
    username = message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

    sorted_users = sorted(users.items(), key=lambda item: item[1]['points'], reverse=True)[:10]
    response = '*–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º–∏—Ä–µ:*\n'
    for idx, (user_id, user_data) in enumerate(sorted_users, 1):
        response += f"{idx}. {user_data['nickname']} ‚Äî {user_data['points']} –æ—á–∫–æ–≤\n"

    bot.send_message(message.chat.id, response, parse_mode='Markdown')
    log_to_console(user_id, username, '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ –º–∏—Ä–∞')

# Run bot
bot.polling(none_stop=True)